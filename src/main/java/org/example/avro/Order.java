/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.example.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Order information schema */
@org.apache.avro.specific.AvroGenerated
public class Order extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8868152243708378833L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Order\",\"namespace\":\"org.example.avro\",\"doc\":\"Order information schema\",\"fields\":[{\"name\":\"orderId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique order identifier\"},{\"name\":\"userId\",\"type\":\"long\",\"doc\":\"User who placed the order\"},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2},\"doc\":\"Order amount\"},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"OrderStatus\",\"symbols\":[\"PENDING\",\"CONFIRMED\",\"SHIPPED\",\"DELIVERED\",\"CANCELLED\"]},\"doc\":\"Order status\",\"default\":\"PENDING\"},{\"name\":\"items\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"List of items in the order\",\"default\":[]},{\"name\":\"orderDate\",\"type\":\"long\",\"doc\":\"Order placement date\",\"logicalType\":\"timestamp-millis\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<Order> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Order> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Order> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Order> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Order> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Order to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Order from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Order instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Order fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique order identifier */
  private java.lang.String orderId;
  /** User who placed the order */
  private long userId;
  /** Order amount */
  private java.nio.ByteBuffer amount;
  /** Order status */
  private org.example.avro.OrderStatus status;
  /** List of items in the order */
  private java.util.List<java.lang.String> items;
  /** Order placement date */
  private long orderDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Order() {}

  /**
   * All-args constructor.
   * @param orderId Unique order identifier
   * @param userId User who placed the order
   * @param amount Order amount
   * @param status Order status
   * @param items List of items in the order
   * @param orderDate Order placement date
   */
  public Order(java.lang.String orderId, java.lang.Long userId, java.nio.ByteBuffer amount, org.example.avro.OrderStatus status, java.util.List<java.lang.String> items, java.lang.Long orderDate) {
    this.orderId = orderId;
    this.userId = userId;
    this.amount = amount;
    this.status = status;
    this.items = items;
    this.orderDate = orderDate;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return orderId;
    case 1: return userId;
    case 2: return amount;
    case 3: return status;
    case 4: return items;
    case 5: return orderDate;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: orderId = value$ != null ? value$.toString() : null; break;
    case 1: userId = (java.lang.Long)value$; break;
    case 2: amount = (java.nio.ByteBuffer)value$; break;
    case 3: status = (org.example.avro.OrderStatus)value$; break;
    case 4: items = (java.util.List<java.lang.String>)value$; break;
    case 5: orderDate = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'orderId' field.
   * @return Unique order identifier
   */
  public java.lang.String getOrderId() {
    return orderId;
  }


  /**
   * Sets the value of the 'orderId' field.
   * Unique order identifier
   * @param value the value to set.
   */
  public void setOrderId(java.lang.String value) {
    this.orderId = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return User who placed the order
   */
  public long getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   * User who placed the order
   * @param value the value to set.
   */
  public void setUserId(long value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return Order amount
   */
  public java.nio.ByteBuffer getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * Order amount
   * @param value the value to set.
   */
  public void setAmount(java.nio.ByteBuffer value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return Order status
   */
  public org.example.avro.OrderStatus getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * Order status
   * @param value the value to set.
   */
  public void setStatus(org.example.avro.OrderStatus value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'items' field.
   * @return List of items in the order
   */
  public java.util.List<java.lang.String> getItems() {
    return items;
  }


  /**
   * Sets the value of the 'items' field.
   * List of items in the order
   * @param value the value to set.
   */
  public void setItems(java.util.List<java.lang.String> value) {
    this.items = value;
  }

  /**
   * Gets the value of the 'orderDate' field.
   * @return Order placement date
   */
  public long getOrderDate() {
    return orderDate;
  }


  /**
   * Sets the value of the 'orderDate' field.
   * Order placement date
   * @param value the value to set.
   */
  public void setOrderDate(long value) {
    this.orderDate = value;
  }

  /**
   * Creates a new Order RecordBuilder.
   * @return A new Order RecordBuilder
   */
  public static org.example.avro.Order.Builder newBuilder() {
    return new org.example.avro.Order.Builder();
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Order RecordBuilder
   */
  public static org.example.avro.Order.Builder newBuilder(org.example.avro.Order.Builder other) {
    if (other == null) {
      return new org.example.avro.Order.Builder();
    } else {
      return new org.example.avro.Order.Builder(other);
    }
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Order instance.
   * @param other The existing instance to copy.
   * @return A new Order RecordBuilder
   */
  public static org.example.avro.Order.Builder newBuilder(org.example.avro.Order other) {
    if (other == null) {
      return new org.example.avro.Order.Builder();
    } else {
      return new org.example.avro.Order.Builder(other);
    }
  }

  /**
   * RecordBuilder for Order instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Order>
    implements org.apache.avro.data.RecordBuilder<Order> {

    /** Unique order identifier */
    private java.lang.String orderId;
    /** User who placed the order */
    private long userId;
    /** Order amount */
    private java.nio.ByteBuffer amount;
    /** Order status */
    private org.example.avro.OrderStatus status;
    /** List of items in the order */
    private java.util.List<java.lang.String> items;
    /** Order placement date */
    private long orderDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.example.avro.Order.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.items)) {
        this.items = data().deepCopy(fields()[4].schema(), other.items);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.orderDate)) {
        this.orderDate = data().deepCopy(fields()[5].schema(), other.orderDate);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Order instance
     * @param other The existing instance to copy.
     */
    private Builder(org.example.avro.Order other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.items)) {
        this.items = data().deepCopy(fields()[4].schema(), other.items);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.orderDate)) {
        this.orderDate = data().deepCopy(fields()[5].schema(), other.orderDate);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'orderId' field.
      * Unique order identifier
      * @return The value.
      */
    public java.lang.String getOrderId() {
      return orderId;
    }


    /**
      * Sets the value of the 'orderId' field.
      * Unique order identifier
      * @param value The value of 'orderId'.
      * @return This builder.
      */
    public org.example.avro.Order.Builder setOrderId(java.lang.String value) {
      validate(fields()[0], value);
      this.orderId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'orderId' field has been set.
      * Unique order identifier
      * @return True if the 'orderId' field has been set, false otherwise.
      */
    public boolean hasOrderId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'orderId' field.
      * Unique order identifier
      * @return This builder.
      */
    public org.example.avro.Order.Builder clearOrderId() {
      orderId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * User who placed the order
      * @return The value.
      */
    public long getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * User who placed the order
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public org.example.avro.Order.Builder setUserId(long value) {
      validate(fields()[1], value);
      this.userId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * User who placed the order
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userId' field.
      * User who placed the order
      * @return This builder.
      */
    public org.example.avro.Order.Builder clearUserId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * Order amount
      * @return The value.
      */
    public java.nio.ByteBuffer getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * Order amount
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public org.example.avro.Order.Builder setAmount(java.nio.ByteBuffer value) {
      validate(fields()[2], value);
      this.amount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * Order amount
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'amount' field.
      * Order amount
      * @return This builder.
      */
    public org.example.avro.Order.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * Order status
      * @return The value.
      */
    public org.example.avro.OrderStatus getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * Order status
      * @param value The value of 'status'.
      * @return This builder.
      */
    public org.example.avro.Order.Builder setStatus(org.example.avro.OrderStatus value) {
      validate(fields()[3], value);
      this.status = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * Order status
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'status' field.
      * Order status
      * @return This builder.
      */
    public org.example.avro.Order.Builder clearStatus() {
      status = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'items' field.
      * List of items in the order
      * @return The value.
      */
    public java.util.List<java.lang.String> getItems() {
      return items;
    }


    /**
      * Sets the value of the 'items' field.
      * List of items in the order
      * @param value The value of 'items'.
      * @return This builder.
      */
    public org.example.avro.Order.Builder setItems(java.util.List<java.lang.String> value) {
      validate(fields()[4], value);
      this.items = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'items' field has been set.
      * List of items in the order
      * @return True if the 'items' field has been set, false otherwise.
      */
    public boolean hasItems() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'items' field.
      * List of items in the order
      * @return This builder.
      */
    public org.example.avro.Order.Builder clearItems() {
      items = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderDate' field.
      * Order placement date
      * @return The value.
      */
    public long getOrderDate() {
      return orderDate;
    }


    /**
      * Sets the value of the 'orderDate' field.
      * Order placement date
      * @param value The value of 'orderDate'.
      * @return This builder.
      */
    public org.example.avro.Order.Builder setOrderDate(long value) {
      validate(fields()[5], value);
      this.orderDate = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'orderDate' field has been set.
      * Order placement date
      * @return True if the 'orderDate' field has been set, false otherwise.
      */
    public boolean hasOrderDate() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'orderDate' field.
      * Order placement date
      * @return This builder.
      */
    public org.example.avro.Order.Builder clearOrderDate() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Order build() {
      try {
        Order record = new Order();
        record.orderId = fieldSetFlags()[0] ? this.orderId : (java.lang.String) defaultValue(fields()[0]);
        record.userId = fieldSetFlags()[1] ? this.userId : (java.lang.Long) defaultValue(fields()[1]);
        record.amount = fieldSetFlags()[2] ? this.amount : (java.nio.ByteBuffer) defaultValue(fields()[2]);
        record.status = fieldSetFlags()[3] ? this.status : (org.example.avro.OrderStatus) defaultValue(fields()[3]);
        record.items = fieldSetFlags()[4] ? this.items : (java.util.List<java.lang.String>) defaultValue(fields()[4]);
        record.orderDate = fieldSetFlags()[5] ? this.orderDate : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Order>
    WRITER$ = (org.apache.avro.io.DatumWriter<Order>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Order>
    READER$ = (org.apache.avro.io.DatumReader<Order>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










